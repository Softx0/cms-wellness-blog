// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int            @id @default(autoincrement())
  name      String         @default("")
  email     String         @unique @default("")
  password  String
  role      UserRoleType   @default(author)
  status    UserStatusType @default(active)
  bio       String         @default("")
  posts     Post[]         @relation("Post_author")
  comments  Comment[]      @relation("Comment_author")
  apiKeys   ApiKey[]       @relation("ApiKey_user")
  createdAt DateTime       @default(now())
  updatedAt DateTime?      @default(now()) @updatedAt
}

model Post {
  id                 Int             @id @default(autoincrement())
  title              String          @default("")
  slug               String          @unique @default("")
  status             PostStatusType? @default(draft)
  publishedAt        DateTime?
  excerpt            String          @default("")
  content            Json            @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  readingTimeMinutes Int             @default(5)
  featuredImage      String          @default("")
  author             User?           @relation("Post_author", fields: [authorId], references: [id])
  authorId           Int?            @map("author")
  categories         Category[]      @relation("Category_posts")
  tags               Tag[]           @relation("Post_tags")
  comments           Comment[]       @relation("Comment_post")
  seoMetadata        SeoMetadata?    @relation("Post_seoMetadata", fields: [seoMetadataId], references: [id])
  seoMetadataId      Int?            @unique @map("seoMetadata")
  createdAt          DateTime        @default(now())
  updatedAt          DateTime?       @default(now()) @updatedAt

  @@index([authorId])
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique @default("")
  slug        String    @unique @default("")
  description String    @default("")
  posts       Post[]    @relation("Category_posts")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @default(now()) @updatedAt
}

model Tag {
  id        Int       @id @default(autoincrement())
  name      String    @unique @default("")
  slug      String    @unique @default("")
  posts     Post[]    @relation("Post_tags")
  createdAt DateTime  @default(now())
  updatedAt DateTime? @default(now()) @updatedAt
}

model Comment {
  id        Int               @id @default(autoincrement())
  content   String            @default("")
  status    CommentStatusType @default(pending)
  author    User?             @relation("Comment_author", fields: [authorId], references: [id])
  authorId  Int?              @map("author")
  post      Post?             @relation("Comment_post", fields: [postId], references: [id])
  postId    Int?              @map("post")
  isSpam    Boolean           @default(false)
  createdAt DateTime          @default(now())
  updatedAt DateTime?         @default(now()) @updatedAt

  @@index([authorId])
  @@index([postId])
}

model ApiKey {
  id         Int              @id @default(autoincrement())
  name       String           @default("")
  key        String           @unique @default("")
  status     ApiKeyStatusType @default(active)
  expiresAt  DateTime?
  lastUsedAt DateTime?
  user       User?            @relation("ApiKey_user", fields: [userId], references: [id])
  userId     Int?             @map("user")
  createdAt  DateTime         @default(now())
  updatedAt  DateTime?        @default(now()) @updatedAt

  @@index([userId])
}

model SeoMetadata {
  id             Int       @id @default(autoincrement())
  title          String    @default("")
  description    String    @default("")
  keywords       String    @default("")
  ogImage        String    @default("")
  canonicalUrl   String    @default("")
  structuredData Json?
  post           Post?     @relation("Post_seoMetadata")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime? @default(now()) @updatedAt
}

enum UserRoleType {
  admin
  editor
  author
}

enum UserStatusType {
  active
  suspended
  deleted
}

enum PostStatusType {
  draft
  published
  archived
}

enum CommentStatusType {
  pending
  approved
  rejected
}

enum ApiKeyStatusType {
  active
  revoked
}
