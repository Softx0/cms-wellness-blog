# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  role: UserRoleType
  status: UserStatusType
  bio: String
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  comments(where: CommentWhereInput! = {}, orderBy: [CommentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CommentWhereUniqueInput): [Comment!]
  commentsCount(where: CommentWhereInput! = {}): Int
  apiKeys(where: ApiKeyWhereInput! = {}, orderBy: [ApiKeyOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ApiKeyWhereUniqueInput): [ApiKey!]
  apiKeysCount(where: ApiKeyWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

enum UserRoleType {
  admin
  editor
  author
}

enum UserStatusType {
  active
  suspended
  deleted
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  role: UserRoleTypeNullableFilter
  status: UserStatusTypeNullableFilter
  bio: StringFilter
  posts: PostManyRelationFilter
  comments: CommentManyRelationFilter
  apiKeys: ApiKeyManyRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserRoleTypeNullableFilter {
  equals: UserRoleType
  in: [UserRoleType!]
  notIn: [UserRoleType!]
  not: UserRoleTypeNullableFilter
}

input UserStatusTypeNullableFilter {
  equals: UserStatusType
  in: [UserStatusType!]
  notIn: [UserStatusType!]
  not: UserStatusTypeNullableFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input CommentManyRelationFilter {
  every: CommentWhereInput
  some: CommentWhereInput
  none: CommentWhereInput
}

input ApiKeyManyRelationFilter {
  every: ApiKeyWhereInput
  some: ApiKeyWhereInput
  none: ApiKeyWhereInput
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  role: OrderDirection
  status: OrderDirection
  bio: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  role: UserRoleType
  status: UserStatusType
  bio: String
  posts: PostRelateToManyForUpdateInput
  comments: CommentRelateToManyForUpdateInput
  apiKeys: ApiKeyRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input CommentRelateToManyForUpdateInput {
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  create: [CommentCreateInput!]
  connect: [CommentWhereUniqueInput!]
}

input ApiKeyRelateToManyForUpdateInput {
  disconnect: [ApiKeyWhereUniqueInput!]
  set: [ApiKeyWhereUniqueInput!]
  create: [ApiKeyCreateInput!]
  connect: [ApiKeyWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  role: UserRoleType
  status: UserStatusType
  bio: String
  posts: PostRelateToManyForCreateInput
  comments: CommentRelateToManyForCreateInput
  apiKeys: ApiKeyRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input CommentRelateToManyForCreateInput {
  create: [CommentCreateInput!]
  connect: [CommentWhereUniqueInput!]
}

input ApiKeyRelateToManyForCreateInput {
  create: [ApiKeyCreateInput!]
  connect: [ApiKeyWhereUniqueInput!]
}

type Post {
  id: ID!
  title: String
  slug: String
  status: PostStatusType
  publishedAt: DateTime
  excerpt: String
  content: Post_content_Document
  readingTimeMinutes: Int
  featuredImage: String
  author: User
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoryWhereUniqueInput): [Category!]
  categoriesCount(where: CategoryWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  comments(where: CommentWhereInput! = {}, orderBy: [CommentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CommentWhereUniqueInput): [Comment!]
  commentsCount(where: CommentWhereInput! = {}): Int
  seoMetadata: SeoMetadata
  createdAt: DateTime
  updatedAt: DateTime
}

enum PostStatusType {
  draft
  published
  archived
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PostWhereUniqueInput {
  id: ID
  slug: String
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  status: PostStatusTypeNullableFilter
  publishedAt: DateTimeNullableFilter
  excerpt: StringFilter
  readingTimeMinutes: IntFilter
  featuredImage: StringFilter
  author: UserWhereInput
  categories: CategoryManyRelationFilter
  tags: TagManyRelationFilter
  comments: CommentManyRelationFilter
  seoMetadata: SeoMetadataWhereInput
  createdAt: DateTimeFilter
  updatedAt: DateTimeNullableFilter
}

input PostStatusTypeNullableFilter {
  equals: PostStatusType
  in: [PostStatusType!]
  notIn: [PostStatusType!]
  not: PostStatusTypeNullableFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input CategoryManyRelationFilter {
  every: CategoryWhereInput
  some: CategoryWhereInput
  none: CategoryWhereInput
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  status: OrderDirection
  publishedAt: OrderDirection
  excerpt: OrderDirection
  readingTimeMinutes: OrderDirection
  featuredImage: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PostUpdateInput {
  title: String
  slug: String
  status: PostStatusType
  publishedAt: DateTime
  excerpt: String
  content: JSON
  readingTimeMinutes: Int
  featuredImage: String
  author: UserRelateToOneForUpdateInput
  categories: CategoryRelateToManyForUpdateInput
  tags: TagRelateToManyForUpdateInput
  comments: CommentRelateToManyForUpdateInput
  seoMetadata: SeoMetadataRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input CategoryRelateToManyForUpdateInput {
  disconnect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input SeoMetadataRelateToOneForUpdateInput {
  create: SeoMetadataCreateInput
  connect: SeoMetadataWhereUniqueInput
  disconnect: Boolean
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  slug: String
  status: PostStatusType
  publishedAt: DateTime
  excerpt: String
  content: JSON
  readingTimeMinutes: Int
  featuredImage: String
  author: UserRelateToOneForCreateInput
  categories: CategoryRelateToManyForCreateInput
  tags: TagRelateToManyForCreateInput
  comments: CommentRelateToManyForCreateInput
  seoMetadata: SeoMetadataRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input CategoryRelateToManyForCreateInput {
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input SeoMetadataRelateToOneForCreateInput {
  create: SeoMetadataCreateInput
  connect: SeoMetadataWhereUniqueInput
}

type Category {
  id: ID!
  name: String
  slug: String
  description: String
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input CategoryWhereUniqueInput {
  id: ID
  name: String
  slug: String
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  description: StringFilter
  posts: PostManyRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeNullableFilter
}

input CategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  description: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input CategoryUpdateInput {
  name: String
  slug: String
  description: String
  posts: PostRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input CategoryUpdateArgs {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateInput!
}

input CategoryCreateInput {
  name: String
  slug: String
  description: String
  posts: PostRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

type Tag {
  id: ID!
  name: String
  slug: String
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input TagWhereUniqueInput {
  id: ID
  name: String
  slug: String
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  posts: PostManyRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeNullableFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input TagUpdateInput {
  name: String
  slug: String
  posts: PostRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  slug: String
  posts: PostRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

type Comment {
  id: ID!
  content: String
  status: CommentStatusType
  author: User
  post: Post
  isSpam: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

enum CommentStatusType {
  pending
  approved
  rejected
}

input CommentWhereUniqueInput {
  id: ID
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
  id: IDFilter
  content: StringFilter
  status: CommentStatusTypeNullableFilter
  author: UserWhereInput
  post: PostWhereInput
  isSpam: BooleanFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeNullableFilter
}

input CommentStatusTypeNullableFilter {
  equals: CommentStatusType
  in: [CommentStatusType!]
  notIn: [CommentStatusType!]
  not: CommentStatusTypeNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input CommentOrderByInput {
  id: OrderDirection
  content: OrderDirection
  status: OrderDirection
  isSpam: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input CommentUpdateInput {
  content: String
  status: CommentStatusType
  author: UserRelateToOneForUpdateInput
  post: PostRelateToOneForUpdateInput
  isSpam: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input PostRelateToOneForUpdateInput {
  create: PostCreateInput
  connect: PostWhereUniqueInput
  disconnect: Boolean
}

input CommentUpdateArgs {
  where: CommentWhereUniqueInput!
  data: CommentUpdateInput!
}

input CommentCreateInput {
  content: String
  status: CommentStatusType
  author: UserRelateToOneForCreateInput
  post: PostRelateToOneForCreateInput
  isSpam: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input PostRelateToOneForCreateInput {
  create: PostCreateInput
  connect: PostWhereUniqueInput
}

type ApiKey {
  id: ID!
  name: String
  key: String
  status: ApiKeyStatusType
  expiresAt: DateTime
  lastUsedAt: DateTime
  user: User
  createdAt: DateTime
  updatedAt: DateTime
}

enum ApiKeyStatusType {
  active
  revoked
}

input ApiKeyWhereUniqueInput {
  id: ID
  key: String
}

input ApiKeyWhereInput {
  AND: [ApiKeyWhereInput!]
  OR: [ApiKeyWhereInput!]
  NOT: [ApiKeyWhereInput!]
  id: IDFilter
  name: StringFilter
  key: StringFilter
  status: ApiKeyStatusTypeNullableFilter
  expiresAt: DateTimeNullableFilter
  lastUsedAt: DateTimeNullableFilter
  user: UserWhereInput
  createdAt: DateTimeFilter
  updatedAt: DateTimeNullableFilter
}

input ApiKeyStatusTypeNullableFilter {
  equals: ApiKeyStatusType
  in: [ApiKeyStatusType!]
  notIn: [ApiKeyStatusType!]
  not: ApiKeyStatusTypeNullableFilter
}

input ApiKeyOrderByInput {
  id: OrderDirection
  name: OrderDirection
  key: OrderDirection
  status: OrderDirection
  expiresAt: OrderDirection
  lastUsedAt: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ApiKeyUpdateInput {
  name: String
  key: String
  status: ApiKeyStatusType
  expiresAt: DateTime
  lastUsedAt: DateTime
  user: UserRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ApiKeyUpdateArgs {
  where: ApiKeyWhereUniqueInput!
  data: ApiKeyUpdateInput!
}

input ApiKeyCreateInput {
  name: String
  key: String
  status: ApiKeyStatusType
  expiresAt: DateTime
  lastUsedAt: DateTime
  user: UserRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

type SeoMetadata {
  id: ID!
  title: String
  description: String
  keywords: String
  ogImage: String
  canonicalUrl: String
  structuredData: JSON
  post: Post
  createdAt: DateTime
  updatedAt: DateTime
}

input SeoMetadataWhereUniqueInput {
  id: ID
}

input SeoMetadataWhereInput {
  AND: [SeoMetadataWhereInput!]
  OR: [SeoMetadataWhereInput!]
  NOT: [SeoMetadataWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  keywords: StringFilter
  ogImage: StringFilter
  canonicalUrl: StringFilter
  post: PostWhereInput
  createdAt: DateTimeFilter
  updatedAt: DateTimeNullableFilter
}

input SeoMetadataOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
  keywords: OrderDirection
  ogImage: OrderDirection
  canonicalUrl: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input SeoMetadataUpdateInput {
  title: String
  description: String
  keywords: String
  ogImage: String
  canonicalUrl: String
  structuredData: JSON
  post: PostRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input SeoMetadataUpdateArgs {
  where: SeoMetadataWhereUniqueInput!
  data: SeoMetadataUpdateInput!
}

input SeoMetadataCreateInput {
  title: String
  description: String
  keywords: String
  ogImage: String
  canonicalUrl: String
  structuredData: JSON
  post: PostRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createCategory(data: CategoryCreateInput!): Category
  createCategories(data: [CategoryCreateInput!]!): [Category]
  updateCategory(where: CategoryWhereUniqueInput!, data: CategoryUpdateInput!): Category
  updateCategories(data: [CategoryUpdateArgs!]!): [Category]
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCategories(where: [CategoryWhereUniqueInput!]!): [Category]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createComment(data: CommentCreateInput!): Comment
  createComments(data: [CommentCreateInput!]!): [Comment]
  updateComment(where: CommentWhereUniqueInput!, data: CommentUpdateInput!): Comment
  updateComments(data: [CommentUpdateArgs!]!): [Comment]
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteComments(where: [CommentWhereUniqueInput!]!): [Comment]
  createApiKey(data: ApiKeyCreateInput!): ApiKey
  createApiKeys(data: [ApiKeyCreateInput!]!): [ApiKey]
  updateApiKey(where: ApiKeyWhereUniqueInput!, data: ApiKeyUpdateInput!): ApiKey
  updateApiKeys(data: [ApiKeyUpdateArgs!]!): [ApiKey]
  deleteApiKey(where: ApiKeyWhereUniqueInput!): ApiKey
  deleteApiKeys(where: [ApiKeyWhereUniqueInput!]!): [ApiKey]
  createSeoMetadata(data: SeoMetadataCreateInput!): SeoMetadata
  createSeoMetadatas(data: [SeoMetadataCreateInput!]!): [SeoMetadata]
  updateSeoMetadata(where: SeoMetadataWhereUniqueInput!, data: SeoMetadataUpdateInput!): SeoMetadata
  updateSeoMetadatas(data: [SeoMetadataUpdateArgs!]!): [SeoMetadata]
  deleteSeoMetadata(where: SeoMetadataWhereUniqueInput!): SeoMetadata
  deleteSeoMetadatas(where: [SeoMetadataWhereUniqueInput!]!): [SeoMetadata]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
  role: UserRoleType
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoryWhereUniqueInput): [Category!]
  category(where: CategoryWhereUniqueInput!): Category
  categoriesCount(where: CategoryWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  comments(where: CommentWhereInput! = {}, orderBy: [CommentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CommentWhereUniqueInput): [Comment!]
  comment(where: CommentWhereUniqueInput!): Comment
  commentsCount(where: CommentWhereInput! = {}): Int
  apiKeys(where: ApiKeyWhereInput! = {}, orderBy: [ApiKeyOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ApiKeyWhereUniqueInput): [ApiKey!]
  apiKey(where: ApiKeyWhereUniqueInput!): ApiKey
  apiKeysCount(where: ApiKeyWhereInput! = {}): Int
  seoMetadatas(where: SeoMetadataWhereInput! = {}, orderBy: [SeoMetadataOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SeoMetadataWhereUniqueInput): [SeoMetadata!]
  seoMetadata(where: SeoMetadataWhereUniqueInput!): SeoMetadata
  seoMetadatasCount(where: SeoMetadataWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
